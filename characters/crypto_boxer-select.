"use client"

import { useState, useEffect } from "react"
import type { CryptoSymbol, CryptoData } from "@/lib/crypto-data"
import type { BoxingMove } from "@/lib/boxing-moves"
import { cryptoService } from "@/lib/crypto-data"
import { technicalAnalysis } from "@/lib/technical-analysis"
import { boxingMoveCalculator } from "@/lib/boxing-moves"

interface CryptoBoxerProps {
 symbol: CryptoSymbol
 position: "left" | "right"
 onMove?: (move: BoxingMove) => void
}

export function CryptoBoxer({ symbol, position, onMove }: CryptoBoxerProps) {
 const [currentMove, setCurrentMove] = useState<BoxingMove | null>(null)
 const [health, setHealth] = useState(100)
 const [price, setPrice] = useState(0)
 const [isAnimating, setIsAnimating] = useState(false)

 useEffect(() => {
   const handlePriceUpdate = (data: CryptoData) => {
     if (data.symbol !== symbol) return

     setPrice(data.price)
     technicalAnalysis.updatePrice(symbol, data.price)

     const indicators = technicalAnalysis.calculateIndicators(symbol)
     if (indicators) {
       const move = boxingMoveCalculator.calculateMove(indicators)
       setCurrentMove(move)
       onMove?.(move)

       // Trigger animation
       setIsAnimating(true)
       setTimeout(() => setIsAnimating(false), 1000)
     }
   }

   cryptoService.subscribe(handlePriceUpdate)
   return () => cryptoService.unsubscribe(handlePriceUpdate)
 }, [symbol, onMove])

 const getBoxerColor = () => {
   switch (symbol) {
     case "BTC":
       return "text-orange-500"
     case "ETH":
       return "text-blue-500"
     case "SOL":
       return "text-purple-500"
     case "DOGE":
       return "text-yellow-500"
     default:
       return "text-gray-500"
   }
 }

 const getMoveAnimation = () => {
   if (!isAnimating || !currentMove) return ""

   switch (currentMove.type) {
     case "attack":
       return position === "left" ? "animate-pulse" : "animate-bounce"
     case "defense":
       return "animate-pulse"
     case "combo":
       return "animate-ping"
     default:
       return ""
   }
 }

 return (
   <div className={`flex flex-col items-center p-4 ${position === "right" ? "scale-x-[-1]" : ""}`}>
     {/* Boxer Character */}
     <div className={`relative w-32 h-32 ${getMoveAnimation()}`}>
       <div
         className={`w-full h-full rounded-full border-4 ${getBoxerColor()} border-current flex items-center justify-center text-4xl font-bold bg-gradient-to-br from-gray-100 to-gray-300 dark:from-gray-800 dark:to-gray-900`}
       >
         {symbol}
       </div>

       {/* Health Bar */}
       <div className="absolute -bottom-2 left-0 right-0 h-2 bg-gray-300 rounded-full overflow-hidden">
         <div className="h-full bg-green-500 transition-all duration-300" style={{ width: `${health}%` }} />
       </div>
     </div>

     {/* Price Display */}
     <div className="mt-2 text-center">
       <div className="text-sm font-mono">${price.toLocaleString(undefined, { maximumFractionDigits: 2 })}</div>
     </div>

     {/* Current Move */}
     {currentMove && (
       <div className="mt-2 text-center max-w-32">
         <div className="text-xs font-semibold text-blue-600 dark:text-blue-400">{currentMove.name}</div>
         <div className="text-xs text-gray-600 dark:text-gray-400">Power: {Math.round(currentMove.power)}</div>
       </div>
     )}
   </div>
 )
}

